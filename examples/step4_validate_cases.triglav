#!triglav

#
# This example validates the cases files according to the validating ranges
# stored in the databank.
#
type boolean={false,true},
    place={Krakow,Warszawa,Wroclaw,Poznan,Gdansk},
    person={Conan, Gotrek, Gwaigilion},
    
    action={doing_nothing, 
            going_to_(X:place),
            telling_(Y:person)_(X:information),
            asking_(X:person)_to_do_(Y:action),
            asking_(X:person)_whether_(Y:information),
            attacking_(X:person)},
    
    information={(X:person)_is_in_(Y:place),
                (X:person)_is_(Y:action),
                (X:person)_thinks_(Y:information),
                (X:person)_has_told_(Y:person)_(Z:information),
                (X:person)_has_attacked_(Y:person)};
    
input variable where_am_I:place,
    I_have_won_a_fight:boolean usually {false},
    I_can_see_(X:person):boolean,
    (X:person)_is_telling_me_(Y:information):boolean usually {false},
    (X:person)_is_attacking_me:boolean usually {false};
    
output variable I_do:action;
hidden variable where_is_(X:person):place,
                (X:person)_can_see_(Y:person):boolean,
                (X:person)_has_told_(Y:person)_(Z:information):boolean usually {false},
                (X:person)_has_attacked_(Y:person):boolean usually {false},
                (X:person)_thinks_(Y:information):boolean usually {false};
                
expand(2);


"I am Conan, so Conan is where I am.";

if (initial value where_am_I == (X:place) && !initial value where_is_Conan==(X:place))
{
    impossible;    # because I am Conan
}


"I am Conan, so Conan can see the persons I can see.";

if (initial value I_can_see_(X:person)==(V:boolean) && !initial value Conan_can_see_(X:person)==(V:boolean))
{
    impossible;    # because I am Conan
}


"Everyone can see himself.";

if (initial value (X:person)_can_see_(X:person)==false)
{
    impossible;
}

"If someone is in a place and can see someone else, then the other person is in the same place.";

if (initial value (X:person)_can_see_(Y:person)==true && initial value where_is_(X:person)==(A:place) && !initial value where_is_(Y:person)==(A:place)) 
{ 
    impossible; 
}

"If someone does not see someone else then the other person does not see him.";

if (initial value (X:person)_can_see_(Y:person)==false && !initial value (Y:person)_can_see_(X:person)==false) 
{ 
    impossible; 
}

"If someone cannot see someone else then the other person must be somewhere else.";

if (initial value (X:person)_can_see_(Y:person)==false && initial value where_is_(X:person)==(A:place) && initial value where_is_(Y:person)==(A:place)) 
{ 
    impossible; 
}

"If two persons are in the same place then they can see each other.";

if (initial value where_is_(X:person)==(A:place) && initial value where_is_(Y:person)==(A:place) && !(X:person)==(Y:person) && !initial value (X:person)_can_see_(Y:person)==true)
{
    impossible;
}

"If two persons are in different places then they do not see each other.";

if (initial value where_is_(X:person)==(A:place) && initial value where_is_(Y:person)==(B:place) && !(A:place)==(B:place) && !initial value (X:person)_can_see_(Y:person)==false)
{
    impossible;
}

"When I go somewhere, I will get to the place.";

if (initial value where_am_I==(X:place) && initial value I_do==going_to_(Y:place) && terminal value where_am_I==(Y:place) && !(X:place)==(Y:place))
{
    there_is_a_chance(1.0);
}

"When I do nothing, I will stay in the same place.";

if (initial value where_am_I==(X:place) && initial value I_do==doing_nothing && terminal value where_am_I==(X:place))
{
    there_is_a_chance(1.0);
}

"I cannot go to the place where I already am.";

if (initial value where_am_I==(X:place) && initial value I_do==going_to_(X:place))
{
    illegal;
}

"There is no connection from Krakow to Poznan.";

if (initial value where_am_I == Krakow && initial_value I_do==going_to_Poznan)
{
    illegal;
}

"There is no connection from Krakow to Gdansk.";

if (initial value where_am_I == Krakow && initial_value I_do==going_to_Gdansk)
{
    illegal;
}

"There is no connection from Warszawa to Wroclaw.";

if (initial value where_am_I == Warszawa && initial_value I_do==going_to_Wroclaw)
{
    illegal;
}


"There is no connection from Poznan to Krakow.";

if (initial value where_am_I == Poznan && initial_value I_do==going_to_Krakow)
{
    illegal;
}


"There is no connection from Poznan to Gdansk.";

if (initial value where_am_I == Poznan && initial_value I_do==going_to_Gdansk)
{
    illegal;
}


"There is no connection from Wroclaw to Warszawa.";

if (initial value where_am_I == Wroclaw && initial_value I_do==going_to_Warszawa)
{
    illegal;
}

"There is no connection from Wroclaw to Gdansk.";

if (initial value where_am_I == Wroclaw && initial_value I_do==going_to_Gdansk)
{
    illegal;
}


"There is no connection from Gdansk to Krakow.";

if (initial value where_am_I == Gdansk && initial_value I_do==going_to_Krakow)
{
    illegal;
}

"There is no connection from Gdansk to Wroclaw.";

if (initial value where_am_I == Gdansk && initial_value I_do==going_to_Wroclaw)
{
    illegal;
}

"There is no connection from Gdansk to Poznan.";

if (initial value where_am_I == Gdansk && initial_value I_do==going_to_Poznan)
{
    illegal;
}

"I cannot attack someone who is in a different place.";

if (initial value where_am_I==(A:place) && initial value where_is_(X:person)==(B:place) && !(A:place)==(B:place) && initial value I_do==attacking_(X:person))
{
    illegal;
}

"I cannot tell something to someone who is in a different place.";

if (initial value where_am_I==(A:place) && initial value where_is_(X:person)==(B:place) && !(A:place)==(B:place) && initial value I_do==telling_(X:person)_(Y:information))
{
    illegal;
}

"I cannot ask someone who is in a different place to do something.";

if (initial value where_am_I==(A:place) && initial value where_is_(X:person)==(B:place) && !(A:place)==(B:place) && initial value I_do==asking_(X:person)_to_do_(Y:action))
{
    illegal;
}

"I cannot ask someone who is in a different place about an information.";

if (initial value where_am_I==(A:place) && initial value where_is_(X:person)==(B:place) && !(A:place)==(B:place) && initial value I_do==asking_(X:person)_whether_(Y:information))
{
    illegal;
}


"I cannot attack myself.";
if (initial value I_do==attacking_Conan)
{
    illegal;
}

"I cannot ask myself to do anything.";
if (initial value I_do==asking_Conan_to_do_(X:action))
{
    illegal;
}

"If I attack someone there is an 80% chance to win.";

if (initial value I_do==attacking_(X:person) && !(X:person)==Conan && terminal value I_have_won_a_fight == true)
{
    there_is_a_chance(0.8);
}

"If I attack someone there is an 20% chance to loose.";

if (initial value I_do==attacking_(X:person) && !(X:person)==Conan && terminal value I_have_won_a_fight == false)
{
    there_is_a_chance(0.2);
}

"I like winning fights.";

if (initial value I_have_won_a_fight==true)
{
    add_payoff(1.0);
}

open_databank("readme4.xml");
validate_cases();
